<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.QueryRoutesRequest</code>
 */
class QueryRoutesRequest extends \Google\Protobuf\Internal\Message
{
    /**
     *&#47; The 33-byte hex-encoded public key for the payment destination
     *
     * Generated from protobuf field <code>string pub_key = 1;</code>
     */
    private $pub_key = '';
    /**
     *&#47; The amount to send expressed in satoshis
     *
     * Generated from protobuf field <code>int64 amt = 2;</code>
     */
    private $amt = 0;
    /**
     *&#47; An optional CLTV delta from the current height that should be used for the timelock of the final hop
     *
     * Generated from protobuf field <code>int32 final_cltv_delta = 4;</code>
     */
    private $final_cltv_delta = 0;
    /**
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     *
     * Generated from protobuf field <code>.lnrpc.FeeLimit fee_limit = 5;</code>
     */
    private $fee_limit = null;
    /**
     **
     *A list of nodes to ignore during path finding.
     *
     * Generated from protobuf field <code>repeated bytes ignored_nodes = 6;</code>
     */
    private $ignored_nodes;
    /**
     **
     *Deprecated. A list of edges to ignore during path finding.
     *
     * Generated from protobuf field <code>repeated .lnrpc.EdgeLocator ignored_edges = 7 [deprecated = true];</code>
     */
    private $ignored_edges;
    /**
     **
     *The source node where the request route should originated from. If empty,
     *self is assumed.
     *
     * Generated from protobuf field <code>string source_pub_key = 8;</code>
     */
    private $source_pub_key = '';
    /**
     **
     *If set to true, edge probabilities from mission control will be used to get
     *the optimal route.
     *
     * Generated from protobuf field <code>bool use_mission_control = 9;</code>
     */
    private $use_mission_control = false;
    /**
     **
     *A list of directed node pairs that will be ignored during path finding.
     *
     * Generated from protobuf field <code>repeated .lnrpc.NodePair ignored_pairs = 10;</code>
     */
    private $ignored_pairs;
    /**
     ** 
     *An optional maximum total time lock for the route. If the source is empty or
     *ourselves, this should not exceed lnd's `--max-cltv-expiry` setting. If
     *zero, then the value of `--max-cltv-expiry` is used as the limit.
     *
     * Generated from protobuf field <code>uint32 cltv_limit = 11;</code>
     */
    private $cltv_limit = 0;

    public function __construct() {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct();
    }

    /**
     *&#47; The 33-byte hex-encoded public key for the payment destination
     *
     * Generated from protobuf field <code>string pub_key = 1;</code>
     * @return string
     */
    public function getPubKey()
    {
        return $this->pub_key;
    }

    /**
     *&#47; The 33-byte hex-encoded public key for the payment destination
     *
     * Generated from protobuf field <code>string pub_key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setPubKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->pub_key = $var;

        return $this;
    }

    /**
     *&#47; The amount to send expressed in satoshis
     *
     * Generated from protobuf field <code>int64 amt = 2;</code>
     * @return int|string
     */
    public function getAmt()
    {
        return $this->amt;
    }

    /**
     *&#47; The amount to send expressed in satoshis
     *
     * Generated from protobuf field <code>int64 amt = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmt($var)
    {
        GPBUtil::checkInt64($var);
        $this->amt = $var;

        return $this;
    }

    /**
     *&#47; An optional CLTV delta from the current height that should be used for the timelock of the final hop
     *
     * Generated from protobuf field <code>int32 final_cltv_delta = 4;</code>
     * @return int
     */
    public function getFinalCltvDelta()
    {
        return $this->final_cltv_delta;
    }

    /**
     *&#47; An optional CLTV delta from the current height that should be used for the timelock of the final hop
     *
     * Generated from protobuf field <code>int32 final_cltv_delta = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setFinalCltvDelta($var)
    {
        GPBUtil::checkInt32($var);
        $this->final_cltv_delta = $var;

        return $this;
    }

    /**
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     *
     * Generated from protobuf field <code>.lnrpc.FeeLimit fee_limit = 5;</code>
     * @return \Lnrpc\FeeLimit
     */
    public function getFeeLimit()
    {
        return $this->fee_limit;
    }

    /**
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     *
     * Generated from protobuf field <code>.lnrpc.FeeLimit fee_limit = 5;</code>
     * @param \Lnrpc\FeeLimit $var
     * @return $this
     */
    public function setFeeLimit($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\FeeLimit::class);
        $this->fee_limit = $var;

        return $this;
    }

    /**
     **
     *A list of nodes to ignore during path finding.
     *
     * Generated from protobuf field <code>repeated bytes ignored_nodes = 6;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getIgnoredNodes()
    {
        return $this->ignored_nodes;
    }

    /**
     **
     *A list of nodes to ignore during path finding.
     *
     * Generated from protobuf field <code>repeated bytes ignored_nodes = 6;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setIgnoredNodes($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::BYTES);
        $this->ignored_nodes = $arr;

        return $this;
    }

    /**
     **
     *Deprecated. A list of edges to ignore during path finding.
     *
     * Generated from protobuf field <code>repeated .lnrpc.EdgeLocator ignored_edges = 7 [deprecated = true];</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getIgnoredEdges()
    {
        return $this->ignored_edges;
    }

    /**
     **
     *Deprecated. A list of edges to ignore during path finding.
     *
     * Generated from protobuf field <code>repeated .lnrpc.EdgeLocator ignored_edges = 7 [deprecated = true];</code>
     * @param \Lnrpc\EdgeLocator[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setIgnoredEdges($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Lnrpc\EdgeLocator::class);
        $this->ignored_edges = $arr;

        return $this;
    }

    /**
     **
     *The source node where the request route should originated from. If empty,
     *self is assumed.
     *
     * Generated from protobuf field <code>string source_pub_key = 8;</code>
     * @return string
     */
    public function getSourcePubKey()
    {
        return $this->source_pub_key;
    }

    /**
     **
     *The source node where the request route should originated from. If empty,
     *self is assumed.
     *
     * Generated from protobuf field <code>string source_pub_key = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setSourcePubKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->source_pub_key = $var;

        return $this;
    }

    /**
     **
     *If set to true, edge probabilities from mission control will be used to get
     *the optimal route.
     *
     * Generated from protobuf field <code>bool use_mission_control = 9;</code>
     * @return bool
     */
    public function getUseMissionControl()
    {
        return $this->use_mission_control;
    }

    /**
     **
     *If set to true, edge probabilities from mission control will be used to get
     *the optimal route.
     *
     * Generated from protobuf field <code>bool use_mission_control = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setUseMissionControl($var)
    {
        GPBUtil::checkBool($var);
        $this->use_mission_control = $var;

        return $this;
    }

    /**
     **
     *A list of directed node pairs that will be ignored during path finding.
     *
     * Generated from protobuf field <code>repeated .lnrpc.NodePair ignored_pairs = 10;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getIgnoredPairs()
    {
        return $this->ignored_pairs;
    }

    /**
     **
     *A list of directed node pairs that will be ignored during path finding.
     *
     * Generated from protobuf field <code>repeated .lnrpc.NodePair ignored_pairs = 10;</code>
     * @param \Lnrpc\NodePair[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setIgnoredPairs($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Lnrpc\NodePair::class);
        $this->ignored_pairs = $arr;

        return $this;
    }

    /**
     ** 
     *An optional maximum total time lock for the route. If the source is empty or
     *ourselves, this should not exceed lnd's `--max-cltv-expiry` setting. If
     *zero, then the value of `--max-cltv-expiry` is used as the limit.
     *
     * Generated from protobuf field <code>uint32 cltv_limit = 11;</code>
     * @return int
     */
    public function getCltvLimit()
    {
        return $this->cltv_limit;
    }

    /**
     ** 
     *An optional maximum total time lock for the route. If the source is empty or
     *ourselves, this should not exceed lnd's `--max-cltv-expiry` setting. If
     *zero, then the value of `--max-cltv-expiry` is used as the limit.
     *
     * Generated from protobuf field <code>uint32 cltv_limit = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setCltvLimit($var)
    {
        GPBUtil::checkUint32($var);
        $this->cltv_limit = $var;

        return $this;
    }

}


