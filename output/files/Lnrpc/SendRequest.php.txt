<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.SendRequest</code>
 */
class SendRequest extends \Google\Protobuf\Internal\Message
{
    /**
     *&#47; The identity pubkey of the payment recipient
     *
     * Generated from protobuf field <code>bytes dest = 1;</code>
     */
    private $dest = '';
    /**
     *&#47; The hex-encoded identity pubkey of the payment recipient
     *
     * Generated from protobuf field <code>string dest_string = 2;</code>
     */
    private $dest_string = '';
    /**
     *&#47; Number of satoshis to send.
     *
     * Generated from protobuf field <code>int64 amt = 3;</code>
     */
    private $amt = 0;
    /**
     *&#47; The hash to use within the payment's HTLC
     *
     * Generated from protobuf field <code>bytes payment_hash = 4;</code>
     */
    private $payment_hash = '';
    /**
     *&#47; The hex-encoded hash to use within the payment's HTLC
     *
     * Generated from protobuf field <code>string payment_hash_string = 5;</code>
     */
    private $payment_hash_string = '';
    /**
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     *
     * Generated from protobuf field <code>string payment_request = 6;</code>
     */
    private $payment_request = '';
    /**
     **
     *The CLTV delta from the current height that should be used to set the
     *timelock for the final hop.
     *
     * Generated from protobuf field <code>int32 final_cltv_delta = 7;</code>
     */
    private $final_cltv_delta = 0;
    /**
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     *
     * Generated from protobuf field <code>.lnrpc.FeeLimit fee_limit = 8;</code>
     */
    private $fee_limit = null;
    /**
     **
     *The channel id of the channel that must be taken to the first hop. If zero,
     *any channel may be used.
     *
     * Generated from protobuf field <code>uint64 outgoing_chan_id = 9;</code>
     */
    private $outgoing_chan_id = 0;
    /**
     ** 
     *An optional maximum total time lock for the route. This should not exceed
     *lnd's `--max-cltv-expiry` setting. If zero, then the value of
     *`--max-cltv-expiry` is enforced.
     *
     * Generated from protobuf field <code>uint32 cltv_limit = 10;</code>
     */
    private $cltv_limit = 0;
    /**
     ** 
     *An optional field that can be used to pass an arbitrary set of TLV records
     *to a peer which understands the new records. This can be used to pass
     *application specific data during the payment attempt.
     *
     * Generated from protobuf field <code>map<uint64, bytes> dest_tlv = 11;</code>
     */
    private $dest_tlv;

    public function __construct() {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct();
    }

    /**
     *&#47; The identity pubkey of the payment recipient
     *
     * Generated from protobuf field <code>bytes dest = 1;</code>
     * @return string
     */
    public function getDest()
    {
        return $this->dest;
    }

    /**
     *&#47; The identity pubkey of the payment recipient
     *
     * Generated from protobuf field <code>bytes dest = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setDest($var)
    {
        GPBUtil::checkString($var, False);
        $this->dest = $var;

        return $this;
    }

    /**
     *&#47; The hex-encoded identity pubkey of the payment recipient
     *
     * Generated from protobuf field <code>string dest_string = 2;</code>
     * @return string
     */
    public function getDestString()
    {
        return $this->dest_string;
    }

    /**
     *&#47; The hex-encoded identity pubkey of the payment recipient
     *
     * Generated from protobuf field <code>string dest_string = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDestString($var)
    {
        GPBUtil::checkString($var, True);
        $this->dest_string = $var;

        return $this;
    }

    /**
     *&#47; Number of satoshis to send.
     *
     * Generated from protobuf field <code>int64 amt = 3;</code>
     * @return int|string
     */
    public function getAmt()
    {
        return $this->amt;
    }

    /**
     *&#47; Number of satoshis to send.
     *
     * Generated from protobuf field <code>int64 amt = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmt($var)
    {
        GPBUtil::checkInt64($var);
        $this->amt = $var;

        return $this;
    }

    /**
     *&#47; The hash to use within the payment's HTLC
     *
     * Generated from protobuf field <code>bytes payment_hash = 4;</code>
     * @return string
     */
    public function getPaymentHash()
    {
        return $this->payment_hash;
    }

    /**
     *&#47; The hash to use within the payment's HTLC
     *
     * Generated from protobuf field <code>bytes payment_hash = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setPaymentHash($var)
    {
        GPBUtil::checkString($var, False);
        $this->payment_hash = $var;

        return $this;
    }

    /**
     *&#47; The hex-encoded hash to use within the payment's HTLC
     *
     * Generated from protobuf field <code>string payment_hash_string = 5;</code>
     * @return string
     */
    public function getPaymentHashString()
    {
        return $this->payment_hash_string;
    }

    /**
     *&#47; The hex-encoded hash to use within the payment's HTLC
     *
     * Generated from protobuf field <code>string payment_hash_string = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setPaymentHashString($var)
    {
        GPBUtil::checkString($var, True);
        $this->payment_hash_string = $var;

        return $this;
    }

    /**
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     *
     * Generated from protobuf field <code>string payment_request = 6;</code>
     * @return string
     */
    public function getPaymentRequest()
    {
        return $this->payment_request;
    }

    /**
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     *
     * Generated from protobuf field <code>string payment_request = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setPaymentRequest($var)
    {
        GPBUtil::checkString($var, True);
        $this->payment_request = $var;

        return $this;
    }

    /**
     **
     *The CLTV delta from the current height that should be used to set the
     *timelock for the final hop.
     *
     * Generated from protobuf field <code>int32 final_cltv_delta = 7;</code>
     * @return int
     */
    public function getFinalCltvDelta()
    {
        return $this->final_cltv_delta;
    }

    /**
     **
     *The CLTV delta from the current height that should be used to set the
     *timelock for the final hop.
     *
     * Generated from protobuf field <code>int32 final_cltv_delta = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setFinalCltvDelta($var)
    {
        GPBUtil::checkInt32($var);
        $this->final_cltv_delta = $var;

        return $this;
    }

    /**
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     *
     * Generated from protobuf field <code>.lnrpc.FeeLimit fee_limit = 8;</code>
     * @return \Lnrpc\FeeLimit
     */
    public function getFeeLimit()
    {
        return $this->fee_limit;
    }

    /**
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     *
     * Generated from protobuf field <code>.lnrpc.FeeLimit fee_limit = 8;</code>
     * @param \Lnrpc\FeeLimit $var
     * @return $this
     */
    public function setFeeLimit($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\FeeLimit::class);
        $this->fee_limit = $var;

        return $this;
    }

    /**
     **
     *The channel id of the channel that must be taken to the first hop. If zero,
     *any channel may be used.
     *
     * Generated from protobuf field <code>uint64 outgoing_chan_id = 9;</code>
     * @return int|string
     */
    public function getOutgoingChanId()
    {
        return $this->outgoing_chan_id;
    }

    /**
     **
     *The channel id of the channel that must be taken to the first hop. If zero,
     *any channel may be used.
     *
     * Generated from protobuf field <code>uint64 outgoing_chan_id = 9;</code>
     * @param int|string $var
     * @return $this
     */
    public function setOutgoingChanId($var)
    {
        GPBUtil::checkUint64($var);
        $this->outgoing_chan_id = $var;

        return $this;
    }

    /**
     ** 
     *An optional maximum total time lock for the route. This should not exceed
     *lnd's `--max-cltv-expiry` setting. If zero, then the value of
     *`--max-cltv-expiry` is enforced.
     *
     * Generated from protobuf field <code>uint32 cltv_limit = 10;</code>
     * @return int
     */
    public function getCltvLimit()
    {
        return $this->cltv_limit;
    }

    /**
     ** 
     *An optional maximum total time lock for the route. This should not exceed
     *lnd's `--max-cltv-expiry` setting. If zero, then the value of
     *`--max-cltv-expiry` is enforced.
     *
     * Generated from protobuf field <code>uint32 cltv_limit = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setCltvLimit($var)
    {
        GPBUtil::checkUint32($var);
        $this->cltv_limit = $var;

        return $this;
    }

    /**
     ** 
     *An optional field that can be used to pass an arbitrary set of TLV records
     *to a peer which understands the new records. This can be used to pass
     *application specific data during the payment attempt.
     *
     * Generated from protobuf field <code>map<uint64, bytes> dest_tlv = 11;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getDestTlv()
    {
        return $this->dest_tlv;
    }

    /**
     ** 
     *An optional field that can be used to pass an arbitrary set of TLV records
     *to a peer which understands the new records. This can be used to pass
     *application specific data during the payment attempt.
     *
     * Generated from protobuf field <code>map<uint64, bytes> dest_tlv = 11;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setDestTlv($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::UINT64, \Google\Protobuf\Internal\GPBType::BYTES);
        $this->dest_tlv = $arr;

        return $this;
    }

}


